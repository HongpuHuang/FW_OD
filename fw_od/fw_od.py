# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FWOD
                                 A QGIS plugin
 OD反推
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-03
        git sha              : $Format:%H$
        copyright            : (C) 2022 by huanghongpu
        email                : 552477136@qq.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

import math

from qgis.core import *

from matplotlib import pyplot as plt
from .node import *
from .read import read_notoll
from .graph import Network
from copy import deepcopy
from .FW import calc_RG
from .OD import equili_esti
# Initialize Qt resources from file resources.py
from .resources import *
import numpy as np

import matplotlib.pyplot as plt
seed = 0
#因在这个代码里，路段流量观测值是我在全有全无分配基础上加了随机项生成的，为了保证能重复结果，需要指定随机种子
np.random.seed(seed)

# Import the code for the dialog
from .fw_od_dialog import FWODDialog
import os.path

class FWOD:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FWOD_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FW OD')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FWOD', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/fw_od/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'fw od bar'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FW OD'),
                action)
            self.iface.removeToolBarIcon(action)

    # 导入net文件路径
    def select_input_net(self):
        filename,_filter = QFileDialog.getOpenFileName(
            self.dlg,"Select input file","","*.shp"
        )
        self.dlg.lineEditnet.setText(filename)
    # 导入nod文件路径
    def select_input_nod(self):
        filename,_filter = QFileDialog.getOpenFileName(
            self.dlg,"Select input file","","*.shp"
        )
        self.dlg.lineEditnod.setText(filename)

    # 导入trp文件路径
    def select_input_trp(self):
        filename,_filter = QFileDialog.getOpenFileName(
            self.dlg,"Select input file","","*.txt"
        )
        self.dlg.lineEdittrp.setText(filename)

    # 导出shp文件的路径
    def select_output_file(self):
        filename,_filter = QFileDialog.getSaveFileName(
            self.dlg,"Select output file","","*.shp"
        )
        self.dlg.lineEditShp.setText(filename)

    #读取.shp文件
    def read_shp(self, nodename, netname):
        Link_layer = QgsVectorLayer(netname,  "ogr")
        Node_layer = QgsVectorLayer(nodename,  "ogr")
        Link_features = Link_layer.getFeatures()
        Node_features = Node_layer.getFeatures()
        node_count = 0
        #list2 = []
        for feature in Node_features:
            node_count = node_count + 1

            #attrs = feature.attributes()
            #list2.append([feature['nodeid'], feature['X'], feature['Y']])



        #Nodeloc = {}
        #for i in range(node_count):
            #aa = list2[i][0]
            #bb = list2[i][1]
            #cc = list2[i][2]
            #Nodeloc[aa] =(bb,cc)



        #print(Nodeloc)
        link_count=0
        list = []

        for feature in Link_features:
            link_count = link_count + 1
            # retrieve every feature with its geometry and attributes
            # fetch geometry
            # show some information about the feature geometry
            attrs = feature.attributes()
            list.append([feature['tail'], feature['head'], feature['cap(veh/h)'], feature['len(mile)'], feature['fft(min)']])
            #  向列表导入五种属性参数
            # print(tail_id, head_id)
        # create link object and put them into LINK_LIST
        #print(list)
        Capacity = {}
        Length = {}
        Fftime = {}
        Innode = {}
        Outnode = {}
        Link = []
        for i in range(1, node_count+1):
            Innode[i] = []
            Outnode[i] = []
        for i in range(link_count):
            ii = list[i][0]
            jj = list[i][1]
            Capacity[(ii, jj)] = list[i][2]*1000
            Length[(ii, jj)] = list[i][3]*4
            Fftime[(ii, jj)] = list[i][4]/60/36  ##这里要换一步单位
            Innode[jj].append(ii)
            Outnode[ii].append(jj)
            Link.append((ii, jj))
        #print(Capacity)

        #print(Fftime)
        # rectify l_in and l_out

        return ( Capacity, Length, Fftime, Innode, Outnode,Link, node_count, link_count)


    #读取.net文件
    def read_net(self,path_str):
        f1 = open(path_str, 'r', encoding='utf-8')
        l1 = f1.readlines()
        #去除空行
        length=len(l1)

        x=0
        while x < length:
            if l1[x] == '\n':
                del l1[x]
                x -= 1
                length -= 1
            x += 1
        for i in range(len(l1)):
            if '~' in l1[i]:
                l1_START_LINE = i+1
                break
        # str modify
        for i in range(5):

            l1[i] = l1[i].split(' ')
        node_count = eval(l1[1][-1])
        link_count = eval(l1[3][-1])
        for i in range(l1_START_LINE, len(l1)):
            l1[i] = l1[i].rstrip('\n')
            l1[i] = l1[i].rstrip(';')
            l1[i] = l1[i].rstrip('\t')
            l1[i] = l1[i].lstrip('\t')
            l1[i] = l1[i].split('\t')
        readlist = l1[l1_START_LINE:]
        for i in range(link_count):
            for j in range(len(readlist[i])):
                readlist[i][j]=eval(readlist[i][j])
        Capacity = {}
        Length = {}
        Fftime = {}
        Innode = {}
        Outnode = {}
        Link = []
        for i in range(1, node_count+1):
            Innode[i] = []
            Outnode[i] = []
        for i in range(link_count):
            ii = readlist[i][0]
            jj = readlist[i][1]
            Capacity[(ii, jj)] = readlist[i][2]
            Length[(ii, jj)] = readlist[i][3]
            Fftime[(ii, jj)] = readlist[i][4]/60  ##这里要换一步单位
            # Fftime[(ii, jj)] = readlist[i][4]
            Innode[jj].append(ii)
            Outnode[ii].append(jj)
            Link.append((ii, jj))


        return (Capacity, Length, Fftime, Innode, Outnode, Link, node_count, link_count)

    #读取.trp文件
    def read_trp(self,path_str):
        f2 = open(path_str, 'r', encoding='utf-8')
        l2 = f2.readlines()
        length=len(l2)
        x=0
        while x < length:
            if l2[x] == '\n':
                del l2[x]
                x -= 1
                length -= 1
            x += 1
        # str modify
        for i in range(3):
            l2[i] = l2[i].split(' ')

        flow_count = eval(l2[1][-1])
        changelinecount = 0
        changeline=[]
        for i in range(len(l2)):
            if 'Origin' in l2[i]:
                changeline.append(i)
                changelinecount += 1
        changelinerolling = changeline[1:]
        changelinerolling.append(len(l2))
        for i,t in zip(changeline,changelinerolling):
            l2[i] = l2[i].rstrip('\n')
            l2[i] = l2[i].replace(' ','')
            l2[i] = l2[i].split('\t')
            for j in range(1, t-i):
                l2[i+j] = l2[i+j].rstrip('\n')
                l2[i+j] = l2[i+j].replace(' ','')
                l2[i+j] = l2[i+j].rstrip(';')
                l2[i+j] = l2[i+j].split(';')
        #flatten demand
        readlist2=[]
        for i,t in zip(changeline, changelinerolling):
            readlist2.append([l2[i][0],l2[i][-1]])
            ext = []
            for j in range(1,t-i):
                ext.extend(l2[i+j])
            readlist2.append(ext)
        Demand = {}
        Odtree = {}
        for i in range(0,len(readlist2), 2):
            o_id = eval(readlist2[i][-1])
            d_id_list = []
            for j in range(len(readlist2[i+1])):
                d_id, demand = eval(readlist2[i+1][j].split(':')[0]),eval(readlist2[i+1][j].split(':')[-1])
                if (d_id != o_id) and (abs(demand-0) > pow(10,-8)):
                    d_id_list.append(d_id)
                    Demand[(o_id, d_id)]=demand
            Odtree[o_id] = d_id_list

        return (Odtree, Demand, flow_count)

    #读取.nod文件s
    def read_nod(self,path_str):
        f3 = open(path_str, 'r', encoding='utf-8')
        l3 = f3.readlines()
        #去除空行
        length=len(l3)
        x=0
        while x < length:
            if l3[x] == '\n':
                del l3[x]
                x -= 1
                length -= 1
            x += 1
        #添加到Node属性
        for i in range(1, len(l3)):
            l3[i] = l3[i].rstrip('\n')
            l3[i] = l3[i].rstrip(';')
            l3[i] = l3[i].rstrip('\t')
            l3[i] = l3[i].split('\t')
        readlist3 = l3 #0位置使用题头占用
        for i in range(1,len(readlist3)):
            for j in range(len(readlist3[i])):
                #print(readlist3[i][j])
                readlist3[i][j] = eval(readlist3[i][j])
        Nodeloc = {}
        for i in range(1,len(readlist3)):
            Nodeloc[readlist3[i][0]]=(readlist3[i][1],readlist3[i][2])

        return Nodeloc

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FWODDialog()
            self.dlg.pushButtonnet.clicked.connect(self.select_input_net)
            self.dlg.pushButtonnod.clicked.connect(self.select_input_nod)
            self.dlg.pushButtontrp.clicked.connect(self.select_input_trp)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        self.dlg.pushButtonstart.clicked.connect(self.result)
        self.dlg.pushButtonend.clicked.connect(self.end)
        # See if OK was pressed

    def end(self):
        self.dlg.lineEdittrp.setText('')
        self.dlg.lineEditnet.setText('')
        self.dlg.lineEditnod.setText('')

    def result(self):
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
        NETWORK = 'sf'
        netname = self.dlg.lineEditnet.text()
        nodname = self.dlg.lineEditnod.text()
        trpname = self.dlg.lineEdittrp.text()
        Node_filename = "sf-ex1_nod_s" #sf-ex1_nod_s
        Link_filename = "sf-ex1_lnk_s" #sf-ex1_lnk_s
        #Capacity, Length, Fftime, Innode, Outnode, Link, node_count, link_count = self.read_net(netname)
        #Nodeloc = self.read_nod(nodname)
        Capacity, Length, Fftime, Innode, Outnode,Link, node_count, link_count = self.read_shp(nodname, netname)
        Odtree, Demand, flow_count = self.read_trp(trpname)
        net = Network(NETWORK,Innode, Outnode, Link, Odtree)   #构建一个Network的对象，名字叫类，其构建出了网络的拓扑结构
        Time = deepcopy(Fftime)   #一开始是Fftime，用deepcopy可以使Time和Fftime有自己的存储位置，使其有不一样的存储值
        rglist, rg2list, demand_est= equili_esti(net, Time, Fftime, Capacity, Demand, 10, pow(10, -8), 1, mode=1)   #rglist是算出来的收敛精度，demand_set是输出的估计出的OD矩阵
        #pow(10,-8)收敛精度设置到10^-8，迭代次数10次

        print("OD估计结果为：", demand_est)
        plt.plot(range(len(rglist)), rglist, label="Flow Similarity RG")
        plt.plot(range(len(rg2list)),rg2list, label="OD Similarity RG")
        plt.xlabel("Iteration")
        plt.ylabel("Relative Gap")
        plt.legend()
        pass
